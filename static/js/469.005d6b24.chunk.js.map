{"version":3,"file":"static/js/469.005d6b24.chunk.js","mappings":"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","sources":["components/Common/InputText.jsx","pages/SignUpPage/SignUpPage.js"],"sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n} from '@chakra-ui/form-control';\nimport { Input, InputGroup, InputRightElement, Button } from '@chakra-ui/react';\nimport { Field, useField } from 'formik';\nimport { useState } from 'react';\n\nconst TextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  return (\n    <FormControl\n      isInvalid={meta.error && meta.touched}\n      errorBorderColor=\"red.300\"\n    >\n      <FormLabel>{label}</FormLabel>\n      {props.type !== 'password' ? (\n        <Field as={Input} {...field} {...props} />\n      ) : (\n        <InputGroup size=\"md\">\n          <Field\n            as={Input}\n            {...field}\n            {...props}\n            type={show ? 'text' : 'password'}\n            pr=\"4.5rem\"\n          />\n          <InputRightElement w=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? 'Hide' : 'Show'}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      )}\n\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default TextField;\n","// import PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useRef } from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Button,\n  Link,\n  Stack,\n  Text,\n  useBoolean,\n  VStack,\n} from '@chakra-ui/react';\nimport TextField from 'components/Common/InputText';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { register } from 'redux/auth/operations';\n\nconst SignUpPage = () => {\n  const [isSignUpFailed, setSignUpFail] = useBoolean(false);\n  const navigate = useNavigate();\n  const errorMessageTimeOut = useRef(null);\n  const clearErrorMessage = () => {\n    clearTimeout(errorMessageTimeOut);\n  };\n  // check is user already loggedIn\n\n  useEffect(() => {\n    if (isSignUpFailed) {\n      errorMessageTimeOut.current = setTimeout(() => {\n        setSignUpFail.off();\n      }, 2000);\n    }\n    return () => {\n      if (errorMessageTimeOut) return clearErrorMessage(errorMessageTimeOut);\n    };\n  }, [isSignUpFailed, setSignUpFail]);\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'Name is too short!')\n      .max(20, 'Name is too long!'),\n    email: yup.string().email('invalid email').required('email is required!'),\n    password: yup\n      .string()\n      .min(7, 'Password is too short')\n      .required('Password is required!'),\n    passwordConfirmation: yup\n      .string()\n      .oneOf([yup.ref('password'), null], 'Passwords must match'),\n  });\n  // if (isOpen) {\n  //   return (\n  //     <AlertDialog\n  //       isOpen={isOpen}\n  //       leastDestructiveRef={cancelRef}\n  //       onClose={onClose}\n  //     >\n  //       <AlertDialogOverlay />\n  //       <AlertDialogContent>\n  //         <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n  //           Log out from current user {name}\n  //         </AlertDialogHeader>\n\n  //         <AlertDialogBody>Are you sure you want to log out?</AlertDialogBody>\n\n  //         <AlertDialogFooter>\n  //           <Button ref={cancelRef} onClick={cancelOperation}>\n  //             Cancel\n  //           </Button>\n  //           <Button variantColor=\"red\" onClick={handleLogOut} ml={3}>\n  //             Log Out\n  //           </Button>\n  //         </AlertDialogFooter>\n  //       </AlertDialogContent>\n  //     </AlertDialog>\n  //   );\n  // }\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n        passwordConfirmation: '',\n      }}\n      validationSchema={validationSchema}\n      handle\n      onSubmit={async (values, { resetForm, setSubmitting }) => {\n        const { name, email, password } = values;\n        try {\n          await dispatch(register({ name, email, password }));\n          resetForm();\n          navigate('/contacts', { replace: true });\n        } catch (error) {\n          setSubmitting(false);\n          setSignUpFail.on();\n        }\n      }}\n    >\n      {formik => (\n        <VStack\n          as=\"form\"\n          mx=\"auto\"\n          w={{ base: '90%', md: 400 }}\n          py={5}\n          justifyContent=\"center\"\n          onSubmit={formik.handleSubmit}\n        >\n          <TextField\n            name=\"name\"\n            placeholder=\"name\"\n            autoComplete=\"off\"\n            type=\"text\"\n          ></TextField>\n          <TextField\n            name=\"email\"\n            placeholder=\"enter email\"\n            autoComplete=\"off\"\n            type=\"email\"\n          ></TextField>\n          <TextField\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"off\"\n            placeholder=\"enter password\"\n          ></TextField>\n          <TextField\n            name=\"passwordConfirmation\"\n            type=\"password\"\n            autoComplete=\"off\"\n            placeholder=\"enter confirm password\"\n          ></TextField>\n\n          {isSignUpFailed && (\n            <Text color=\"red\">Registration failed, please try again later</Text>\n          )}\n          <Stack pt={4}>\n            <Text fontSize=\"12px\">\n              Already have an account?{' '}\n              <Link color=\"blue\" as={NavLink} to=\"/login\">\n                Log in\n              </Link>\n            </Text>\n            <Button disabled={formik.isSubmitting} type=\"submit\">\n              Log In\n            </Button>\n          </Stack>\n        </VStack>\n      )}\n    </Formik>\n  );\n};\nexport default SignUpPage;\n"],"names":["label","props","useField","field","meta","useState","show","setShow","isInvalid","error","touched","errorBorderColor","type","as","Input","size","pr","w","h","onClick","useBoolean","isSignUpFailed","setSignUpFail","navigate","useNavigate","errorMessageTimeOut","useRef","useEffect","current","setTimeout","off","clearTimeout","dispatch","useDispatch","validationSchema","yup","shape","name","min","max","email","required","password","passwordConfirmation","oneOf","initialValues","handle","onSubmit","values","resetForm","setSubmitting","register","replace","on","formik","mx","base","md","py","justifyContent","handleSubmit","placeholder","autoComplete","color","pt","fontSize","NavLink","to","disabled","isSubmitting"],"sourceRoot":""}