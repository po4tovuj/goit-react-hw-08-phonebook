{"version":3,"file":"static/js/838.874798d9.chunk.js","mappings":"+NA2CA,IAlCkB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,MAAUC,GAAY,YACzC,GAAsBC,EAAAA,EAAAA,IAASD,GAA/B,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAwBC,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,UAAC,KAAD,CACEC,UAAWJ,EAAKK,OAASL,EAAKM,QAC9BC,iBAAiB,UAFnB,WAIE,SAAC,KAAD,UAAYX,IACI,aAAfC,EAAMW,MACL,SAAC,MAAD,gBAAOC,GAAIC,EAAAA,IAAWX,GAAWF,KAEjC,UAAC,KAAD,CAAYc,KAAK,KAAjB,WACE,SAAC,MAAD,wBACEF,GAAIC,EAAAA,IACAX,GACAF,GAHN,IAIEW,KAAMN,EAAO,OAAS,WACtBU,GAAG,aAEL,SAAC,KAAD,CAAmBC,EAAE,SAArB,UACE,SAAC,KAAD,CAAQC,EAAE,UAAUH,KAAK,KAAKI,QAnBpB,kBAAMZ,GAASD,EAAf,EAmBV,SACGA,EAAO,OAAS,eAMzB,SAAC,KAAD,UAAmBF,EAAKK,UAG7B,C,oNCqED,UA3FkB,WAChB,OAAsCW,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,GAAsBC,EAAAA,EAAAA,QAAO,MAC7BC,GAAWC,EAAAA,EAAAA,MACTC,GAAiBC,EAAAA,EAAAA,KAAjBD,cAIRE,EAAAA,EAAAA,YAAU,WAIR,OAHAN,EAAoBO,QAAUC,YAAW,WACvCT,EAAaU,KACd,GAAE,KACI,WANPC,aAAaV,EAQZ,CACF,GAAE,CAACF,EAAeC,IACnB,IAAMY,GAAWC,EAAAA,EAAAA,MACXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,OAAQF,EAAAA,KACRG,MAAOH,EAAAA,KAAaG,MAAM,iBAAiBC,SAAS,sBAEpDC,SAAUL,EAAAA,KAEPM,IAAI,EAAG,yBACPF,SAAS,2BAEd,OACE,8BACGd,GACC,SAAC,IAAD,KAEA,SAAC,KAAD,CACEiB,cAAe,CAAEJ,MAAO,GAAIE,SAAU,IACtCN,iBAAkBA,EAClBS,QAAM,EACNC,SAAQ,mCAAE,WAAOC,EAAQC,GAAf,wEACRC,QAAQC,IAAI,WAAYH,GADhB,kBAGAb,GAASiB,EAAAA,EAAAA,IAAMJ,IAHf,OAINC,EAAQI,YACR3B,EAAS,YAAa,CAAE4B,SAAS,IAL3B,gDAONL,EAAQM,eAAc,GACtBhC,EAAaiC,KARP,yDAAF,wDAJV,SAgBG,SAAAC,GAAM,OACL,UAAC,KAAD,CACE3C,GAAG,OACH4C,GAAG,OACHC,GAAI,EACJzC,EAAG,CAAE0C,KAAM,MAAOC,GAAI,KACtBC,eAAe,SACff,SAAUU,EAAOM,aANnB,WAQE,SAAC,IAAD,CACEC,KAAK,QACLC,YAAY,cACZpD,KAAK,QACLqD,aAAa,QAEf,SAAC,IAAD,CACEF,KAAK,WACLnD,KAAK,WACLqD,aAAa,KACbD,YAAY,mBAEb3C,EACAA,IACC,SAAC,KAAD,CAAM6C,MAAM,MAAZ,gDAGF,UAAC,KAAD,CAAOC,GAAI,EAAX,WACE,UAAC,KAAD,CAAMC,SAAS,OAAf,mCACyB,KACvB,SAAC,KAAD,CAAMF,MAAM,OAAOrD,GAAIwD,EAAAA,GAASC,GAAG,UAAnC,yBAIF,SAAC,KAAD,CAAQC,SAAUf,EAAOgB,aAAc5D,KAAK,SAA5C,yBAjCC,KA2ChB,C","sources":["components/Common/InputText.jsx","pages/LoginPage/LogInPage.js"],"sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n} from '@chakra-ui/form-control';\nimport { Input, InputGroup, InputRightElement, Button } from '@chakra-ui/react';\nimport { Field, useField } from 'formik';\nimport { useState } from 'react';\n\nconst TextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  return (\n    <FormControl\n      isInvalid={meta.error && meta.touched}\n      errorBorderColor=\"red.300\"\n    >\n      <FormLabel>{label}</FormLabel>\n      {props.type !== 'password' ? (\n        <Field as={Input} {...field} {...props} />\n      ) : (\n        <InputGroup size=\"md\">\n          <Field\n            as={Input}\n            {...field}\n            {...props}\n            type={show ? 'text' : 'password'}\n            pr=\"4.5rem\"\n          />\n          <InputRightElement w=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? 'Hide' : 'Show'}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      )}\n\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default TextField;\n","// import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Button,\n  Text,\n  Link,\n  useBoolean,\n  VStack,\n  Stack,\n} from '@chakra-ui/react';\nimport TextField from 'components/Common/InputText';\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useRef } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { logIn } from 'redux/auth/operations';\nimport { useAuth } from 'hooks';\nimport { Loader } from 'components/Loader/Loader';\n\nconst LoginPage = () => {\n  const [isLoginFailed, setLoginFail] = useBoolean();\n  const errorMessageTimeOut = useRef(null);\n  const navigate = useNavigate();\n  const { isRefreshing } = useAuth();\n  const clearErrorMessage = () => {\n    clearTimeout(errorMessageTimeOut);\n  };\n  useEffect(() => {\n    errorMessageTimeOut.current = setTimeout(() => {\n      setLoginFail.off();\n    }, 2000);\n    return () => {\n      clearErrorMessage(errorMessageTimeOut);\n    };\n  }, [isLoginFailed, setLoginFail]);\n  const dispatch = useDispatch();\n  const validationSchema = yup.object().shape({\n    isName: yup.boolean(),\n    email: yup.string().email('invalid email').required('email is required!'),\n\n    password: yup\n      .string()\n      .min(6, 'Password is too short')\n      .required('Password is required!'),\n  });\n  return (\n    <>\n      {isRefreshing ? (\n        <Loader />\n      ) : (\n        <Formik\n          initialValues={{ email: '', password: '' }}\n          validationSchema={validationSchema}\n          handle\n          onSubmit={async (values, actions) => {\n            console.log('values: ', values);\n            try {\n              await dispatch(logIn(values));\n              actions.resetForm();\n              navigate('/contacts', { replace: true });\n            } catch (error) {\n              actions.setSubmitting(false);\n              setLoginFail.on();\n            }\n          }}\n        >\n          {formik => (\n            <VStack\n              as=\"form\"\n              mx=\"auto\"\n              py={5}\n              w={{ base: '90%', md: 400 }}\n              justifyContent=\"center\"\n              onSubmit={formik.handleSubmit}\n            >\n              <TextField\n                name=\"email\"\n                placeholder=\"enter email\"\n                type=\"email\"\n                autoComplete=\"on\"\n              ></TextField>\n              <TextField\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"on\"\n                placeholder=\"enter password\"\n              ></TextField>\n              {isLoginFailed}\n              {isLoginFailed && (\n                <Text color=\"red\"> Wrong email/password combination</Text>\n              )}\n\n              <Stack pt={4}>\n                <Text fontSize=\"12px\">\n                  Don't have an account?{' '}\n                  <Link color=\"blue\" as={NavLink} to=\"/signup\">\n                    Sign Up\n                  </Link>\n                </Text>\n                <Button disabled={formik.isSubmitting} type=\"submit\">\n                  Log In\n                </Button>\n              </Stack>\n            </VStack>\n          )}\n        </Formik>\n      )}\n    </>\n  );\n};\nexport default LoginPage;\n"],"names":["label","props","useField","field","meta","useState","show","setShow","isInvalid","error","touched","errorBorderColor","type","as","Input","size","pr","w","h","onClick","useBoolean","isLoginFailed","setLoginFail","errorMessageTimeOut","useRef","navigate","useNavigate","isRefreshing","useAuth","useEffect","current","setTimeout","off","clearTimeout","dispatch","useDispatch","validationSchema","yup","shape","isName","email","required","password","min","initialValues","handle","onSubmit","values","actions","console","log","logIn","resetForm","replace","setSubmitting","on","formik","mx","py","base","md","justifyContent","handleSubmit","name","placeholder","autoComplete","color","pt","fontSize","NavLink","to","disabled","isSubmitting"],"sourceRoot":""}