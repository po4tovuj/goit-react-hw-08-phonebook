{"version":3,"file":"static/js/932.7a833538.chunk.js","mappings":"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","sources":["components/Common/InputText.jsx","redux/contacts/selectors.js","components/ContactFilter/ContactFilter.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/Modals/CustomModal.js","components/ContactsList/ContactsList.jsx","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n} from '@chakra-ui/form-control';\nimport { Input, InputGroup, InputRightElement, Button } from '@chakra-ui/react';\nimport { Field, useField } from 'formik';\nimport { useState } from 'react';\n\nconst TextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  return (\n    <FormControl\n      isInvalid={meta.error && meta.touched}\n      errorBorderColor=\"red.300\"\n    >\n      <FormLabel>{label}</FormLabel>\n      {props.type !== 'password' ? (\n        <Field as={Input} {...field} {...props} />\n      ) : (\n        <InputGroup size=\"md\">\n          <Field\n            as={Input}\n            {...field}\n            {...props}\n            type={show ? 'text' : 'password'}\n            pr=\"4.5rem\"\n          />\n          <InputRightElement w=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? 'Hide' : 'Show'}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      )}\n\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default TextField;\n","export const getContacts = state => {\n  return state.contacts.items;\n};\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getContactsError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\nexport const getFilteredContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizeFilter = filter.toLowerCase();\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(normalizeFilter) ||\n      contact.number.includes(normalizeFilter)\n  );\n  return filteredContacts.sort((a, b) =>\n    a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n  );\n};\n","import { SearchIcon } from '@chakra-ui/icons';\nimport { Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <InputGroup size=\"md\" maxW=\"50rem\">\n      <InputLeftElement\n        pointerEvents=\"none\"\n        color=\"gray.300\"\n        fontSize=\"1.2em\"\n        children={<SearchIcon />}\n      />\n      <Input\n        value={filter}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n        placeholder=\"Filter your contacts\"\n      />\n    </InputGroup>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useSelector } from 'react-redux';\n\nimport { getContacts } from 'redux/contacts/selectors';\nimport { VStack, Button, Box } from '@chakra-ui/react';\nimport TextField from 'components/Common/InputText';\nimport { Notify } from 'notiflix';\n\nexport const ContactForm = ({\n  handleClose,\n  handleSubmit,\n  contactName = '',\n  contactNumber = '',\n  isNew = false,\n}) => {\n  const validationSchema = yup.object().shape({\n    isName: yup.boolean(),\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .min(3, 'Too short!')\n      .required('Name is required!'),\n    number: yup\n      .string()\n      .matches(\n        /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .min(7, 'Fill with a valid number')\n      .max(15, 'Fill with a valid number')\n      .required('Phone is required!'),\n  });\n  const contacts = useSelector(getContacts);\n\n  return (\n    <Formik\n      initialValues={{ name: contactName, number: contactNumber }}\n      validateOnBlur={true}\n      validateOnChange={true}\n      onSubmit={(values, { resetForm, setSubmitting, dirty }) => {\n        const name = values.name.toLowerCase();\n\n        if (isNew || (!isNew && !dirty)) {\n          const isContactExist = contacts.find(contact => {\n            const normalizeContactName = contact.name.toLowerCase();\n            return normalizeContactName === name;\n          });\n          if (isContactExist) {\n            return Notify.failure(\n              `Contact '${values.name}' is already in contacts`\n            );\n          }\n        }\n\n        try {\n          handleSubmit(values);\n\n          resetForm();\n          handleClose();\n        } catch (error) {\n          Notify.failure(`${error.message ?? 'Action was failed'}`);\n          setSubmitting(false);\n        }\n      }}\n      validationSchema={validationSchema}\n    >\n      {({ isSubmiting, handleSubmit, handleBlur, resetForm, dirty }) => (\n        <VStack\n          as=\"form\"\n          mx=\"auto\"\n          py={5}\n          w={{ base: '90%', md: '300px' }}\n          justifyContent=\"center\"\n          onSubmit={handleSubmit}\n        >\n          <TextField\n            label=\"Contact name\"\n            name=\"name\"\n            placeholder=\"Contact name\"\n            type=\"text\"\n            onBlur={handleBlur}\n            autoComplete=\"off\"\n          ></TextField>\n          <TextField\n            label=\"Phone number\"\n            name=\"number\"\n            type=\"tel\"\n            placeholder=\"Contact number\"\n            onBlur={handleBlur}\n            autoComplete=\"off\"\n          ></TextField>\n          <Box as=\"p\" pt={4}>\n            <Button\n              mr={6}\n              w=\"120px\"\n              disabled={!dirty || isSubmiting}\n              type=\"submit\"\n            >\n              {isNew ? 'Create' : 'Edit'}\n            </Button>\n            <Button\n              type=\"button\"\n              w=\"120px\"\n              onClick={() => {\n                resetForm();\n                handleClose();\n              }}\n            >\n              Cancel\n            </Button>\n          </Box>\n        </VStack>\n      )}\n    </Formik>\n  );\n};\nContactForm.propTypes = {\n  handleClose: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  contactName: PropTypes.string,\n  contactNumber: PropTypes.string,\n  isNew: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Box, Button, ListItem, Spacer, Text } from '@chakra-ui/react';\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nexport const ContactItem = ({ contact, updateContact }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = contact;\n\n  const handleDelete = e => {\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n    dispatch(deleteContact(id));\n  };\n  return (\n    <ListItem\n      border=\"1px\"\n      borderColor=\"gray.200\"\n      maxW=\"350px\"\n      p=\"4px 8px\"\n      borderRadius=\"md\"\n      display=\"flex\"\n      alignItems={'center'}\n    >\n      <Box>\n        <Text textTransform=\"capitalize\" fontWeight=\"700\">\n          {' '}\n          {name}\n        </Text>{' '}\n        <Text> tel. {number}</Text>\n      </Box>\n      <Spacer />\n      <EditIcon\n        boxSize={5}\n        _hover={{ transform: 'scale(1.2)', cursor: 'pointer' }}\n        onClick={() => updateContact(contact)}\n        mr={4}\n      />\n      <Button\n        _hover={{ transform: 'scale(1.05)' }}\n        colorScheme=\"red\"\n        size=\"xs\"\n        onClick={handleDelete}\n      >\n        Delete <DeleteIcon ml={2} />\n      </Button>\n      {/* </Contact> */}\n    </ListItem>\n  );\n};\nContactItem.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    updateContact: PropTypes.func,\n  }),\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CustomModal = ({ handleClose, isOpen, title, children }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader py={2} borderBottom=\"1px\" borderColor=\"gray.200\">\n          {title}\n          <ModalCloseButton\n            _hover={{ color: 'red.500', backgroundColor: 'gray.100' }}\n          />\n        </ModalHeader>\n        <ModalBody>{children}</ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\nCustomModal.propTypes = {\n  handleClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default CustomModal;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { getFilter, getFilteredContacts } from 'redux/contacts/selectors';\nimport { Box, List, Text, useDisclosure } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport CustomModal from 'components/Modals/CustomModal';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { useState } from 'react';\nimport { updateContact as editContact } from 'redux/contacts/operations';\n\nexport const ContactsList = ({ createNewContact }) => {\n  const filter = useSelector(getFilter);\n  const filteredContacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [selectedContact, setSelectedContact] = useState({\n    name: '',\n    number: '',\n    id: '',\n  });\n  const updateContact = contact => {\n    dispatch(editContact({ ...selectedContact, ...contact }));\n  };\n  const handleOpenEdit = contact => {\n    setSelectedContact(contact);\n    onOpen();\n  };\n  return (\n    <>\n      {!filteredContacts.length ? (\n        <Text mt={4}>\n          {!filter ? 'No saved contacts' : 'Contact not found'}. Would you like\n          to{' '}\n          <Box\n            as=\"span\"\n            cursor=\"pointer\"\n            color=\"blue\"\n            onClick={createNewContact}\n          >\n            create a contact?\n          </Box>\n        </Text>\n      ) : (\n        <List gap={4} display=\"flex\" flexDirection=\"column\" mt={4} pb={4}>\n          {filteredContacts.map(contact => {\n            return (\n              <ContactItem\n                key={contact.id}\n                contact={contact}\n                updateContact={handleOpenEdit}\n              />\n            );\n          })}\n        </List>\n      )}\n      <CustomModal handleClose={onClose} isOpen={isOpen} title=\"Edit Contact\">\n        <ContactForm\n          handleSubmit={updateContact}\n          contactName={selectedContact.name}\n          contactNumber={selectedContact.number}\n          handleClose={onClose}\n        />\n      </CustomModal>\n    </>\n  );\n};\nContactsList.propsTypes = {\n  createNewContact: PropTypes.func,\n};\n","import { Button, Container, HStack, useDisclosure } from '@chakra-ui/react';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport CustomModal from 'components/Modals/CustomModal';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchAll } from 'redux/contacts/operations';\nimport { addContact } from 'redux/contacts/operations';\n\nconst ContactsPage = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchAll());\n  }, [dispatch]);\n  const createContact = values => {\n    dispatch(addContact(values));\n  };\n  return (\n    <Container maxW={'container.xl'} py={4}>\n      <HStack w=\"100%\">\n        <ContactFilter w=\"80%\" />\n        <Button onClick={onOpen}>+</Button>\n      </HStack>\n\n      <ContactsList createNewContact={onOpen}></ContactsList>\n      <CustomModal handleClose={onClose} isOpen={isOpen} title=\"New Contact\">\n        <ContactForm isNew handleSubmit={createContact} handleClose={onClose} />\n      </CustomModal>\n    </Container>\n  );\n};\nexport default ContactsPage;\n"],"names":["label","props","useField","field","meta","useState","show","setShow","isInvalid","error","touched","errorBorderColor","type","as","Input","size","pr","w","h","onClick","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","normalizeFilter","toLowerCase","contact","name","includes","number","sort","a","b","localeCompare","ContactFilter","dispatch","useDispatch","useSelector","maxW","pointerEvents","color","fontSize","children","value","onChange","e","changeFilter","target","placeholder","ContactForm","handleClose","handleSubmit","contactName","contactNumber","isNew","validationSchema","yup","shape","isName","matches","min","required","max","initialValues","validateOnBlur","validateOnChange","onSubmit","values","resetForm","setSubmitting","dirty","find","Notify","message","isSubmiting","handleBlur","mx","py","base","md","justifyContent","onBlur","autoComplete","pt","mr","disabled","ContactItem","updateContact","id","border","borderColor","p","borderRadius","display","alignItems","textTransform","fontWeight","boxSize","_hover","transform","cursor","colorScheme","stopPropagation","nativeEvent","stopImmediatePropagation","deleteContact","ml","isOpen","title","onClose","borderBottom","backgroundColor","ContactsList","createNewContact","filteredContacts","useDisclosure","onOpen","selectedContact","setSelectedContact","handleOpenEdit","length","gap","flexDirection","mt","pb","map","editContact","propsTypes","PropTypes","useEffect","fetchAll","addContact"],"sourceRoot":""}